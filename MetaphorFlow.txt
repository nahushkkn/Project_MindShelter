import React, { useState, useEffect } from "react";
import { Realm } from "@/entities/Realm";
import { Session } from "@/entities/Session";
import { User } from "@/entities/User";
import { InvokeLLM } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Sparkles, Heart, Star, Brain } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function MetaphorFlow() {
  const [realm, setRealm] = useState(null);
  // Removed selectedMetaphors and currentStep as per new flow
  const [isLoading, setIsLoading] = useState(true);
  const [isMatching, setIsMatching] = useState(false);
  const [currentMetaphors, setCurrentMetaphors] = useState([]);
  const [isGeneratingMetaphors, setIsGeneratingMetaphors] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const realmId = urlParams.get('realm');
    if (realmId) {
      loadRealm(realmId);
    }
  }, []);

  useEffect(() => {
    if (realm) { // Removed currentStep condition
      generateMetaphorsForStep();
    }
  }, [realm]); // Removed currentStep from dependency array

  const loadRealm = async (realmId) => {
    try {
      const realmData = await Realm.get(realmId);
      setRealm(realmData);
    } catch (error) {
      console.error("Error loading realm:", error);
      navigate(createPageUrl("Home"));
    }
    setIsLoading(false);
  };

  const generateMetaphorsForStep = async () => {
    if (!realm) return;
    
    setIsGeneratingMetaphors(true);
    try {
      const response = await InvokeLLM({
        prompt: `Generate 3 unique and profound figurative language prompts (metaphors, similes, or personification) 
        for the theme "${realm.name}" which is about "${realm.description}". 
        
        These should be introspective, emotionally resonant, and help people connect with their inner experience related to this theme.
        Each should be 8-15 words long and capture different aspects of the human experience within this realm.
        
        Make them poetic and meaningful - these will help match people with similar emotional states and perspectives.
        
        Format: Return exactly 3 items, each as a complete figurative statement.`,
        response_json_schema: {
          type: "object",
          properties: {
            metaphors: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  text: { type: "string" },
                  type: { type: "string", enum: ["metaphor", "simile", "personification"] }
                }
              },
              minItems: 3,
              maxItems: 3
            }
          }
        }
      });
      
      setCurrentMetaphors(response.metaphors || []);
    } catch (error) {
      console.error("Error generating metaphors:", error);
      // Fallback to static metaphors if LLM fails
      const fallbackMetaphors = realm.metaphors || []; // Simplified fallback logic
      setCurrentMetaphors(fallbackMetaphors.slice(0, 3)); // Get first 3 from static list
    }
    setIsGeneratingMetaphors(false);
  };

  const handleMetaphorSelect = (metaphor) => {
    // Immediately find a session after a single selection
    findSession([metaphor]); // Pass the single selected metaphor in an array
  };

  const findSession = async (selectedMetaphors) => { // This now expects an array with one metaphor
    setIsMatching(true);
    
    try {
      const user = await User.me();
      
      // Generate a personalized reflection prompt
      const icebreakerResponse = await InvokeLLM({
        prompt: `Based on the theme "${realm.name}" and the selected metaphor: "${selectedMetaphors[0].text}", 
        generate a thoughtful, personal reflection prompt that invites deep sharing and connection. 
        The question should be open-ended, emotionally resonant, and help the person share a meaningful personal experience related to this theme.
        Keep it to one sentence and make it conversational.`,
        response_json_schema: {
          type: "object",
          properties: {
            icebreaker: { type: "string" }
          }
        }
      });
      
      // Simulate matching process
      await new Promise(resolve => setTimeout(resolve, 4000));
      
      // Create session
      const newSession = await Session.create({
        realm_id: realm.id,
        scheduled_time: new Date().toISOString(),
        participants: [{
          user_id: user.id,
          chosen_metaphor: selectedMetaphors[0].text, // Use the single selected metaphor's text
          relatability_stars: Math.floor(Math.random() * 2) + 4, // 4-5 stars
          icebreaker_prompt: icebreakerResponse.icebreaker || `Share a moment when you experienced ${realm.name.toLowerCase()}, and what it taught you about yourself.`,
          joined_at: new Date().toISOString()
        }],
        room_code: Math.random().toString(36).substring(2, 8).toUpperCase()
      });

      navigate(createPageUrl(`SessionLobby?session=${newSession.id}`));
    } catch (error) {
      console.error("Error finding session:", error);
      setIsMatching(false);
    }
  };

  if (isLoading) {
    return (
      <div className="p-8 flex items-center justify-center min-h-screen">
        <div className="glass-morphism rounded-3xl p-8 text-center">
          <div className="animate-spin w-8 h-8 border-2 border-amber-300 border-t-amber-600 rounded-full mx-auto mb-4"></div>
          <p className="text-amber-dark">Loading your sanctuary...</p>
        </div>
      </div>
    );
  }

  if (isMatching) {
    return (
      <div className="p-8 flex items-center justify-center min-h-screen">
        <div className="glass-morphism rounded-3xl p-12 text-center max-w-md">
          <div className="w-20 h-20 mx-auto mb-8">
            <div className="w-full h-full border-4 border-amber-200 border-t-amber-600 rounded-full animate-spin"></div>
          </div>
          <h2 className="text-2xl font-bold text-amber-dark mb-4">Creating Your Circle</h2>
          <p className="text-amber-light mb-6">We're connecting you with kindred souls who resonate with your chosen metaphors...</p>
          <div className="flex justify-center gap-2">
            <div className="w-2 h-2 bg-amber-400 rounded-full animate-bounce" style={{animationDelay: '0s'}}></div>
            <div className="w-2 h-2 bg-amber-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
            <div className="w-2 h-2 bg-amber-400 rounded-full animate-bounce" style={{animationDelay: '0.4s'}}></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8 max-w-4xl mx-auto">
      {/* Header */}
      <div className="flex items-center gap-4 mb-8">
        <Button 
          variant="ghost" 
          size="icon"
          onClick={() => navigate(createPageUrl("Home"))}
          className="glass-morphism text-amber-dark hover:bg-white/10"
        >
          <ArrowLeft className="w-5 h-5" />
        </Button>
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900">{realm?.name}</h1>
          <p className="text-gray-700">Alignment</p>
        </div>
      </div>

      {/* Removed Progress Indicator */}
      {/* Removed Selected Metaphors section */}

      {/* Metaphor Selection */}
      <div className="space-y-6">
        <div className="text-center mb-8 glass-morphism rounded-2xl p-6"> {/* Added glass-morphism styling */}
          <h2 className="text-xl font-semibold text-amber-dark mb-3">
            Which prompt speaks to your soul? {/* Updated text */}
          </h2>
          <p className="text-amber-light">
            Your selection helps us create meaningful connections with others on similar journeys. {/* Updated text */}
          </p>
        </div>

        {isGeneratingMetaphors ? (
          <div className="text-center py-12">
            <div className="w-12 h-12 border-4 border-amber-200 border-t-amber-600 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-700">Generating personalized metaphors...</p>
          </div>
        ) : (
          <div className="grid gap-4">
            {currentMetaphors.map((metaphor, index) => (
              <Card 
                key={index} 
                className="glass-morphism border-white/10 hover:bg-amber-600/90 cursor-pointer transition-all duration-300 group hover:shadow-lg"
                onClick={() => handleMetaphorSelect(metaphor)}
              >
                <CardContent className="p-6">
                  <div className="flex items-start gap-4">
                    <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-amber-100 to-amber-200 flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                      <Sparkles className="w-6 h-6 text-amber-700" /> {/* Changed to single Sparkles icon */}
                    </div>
                    <div className="flex-1">
                      <p className="text-amber-dark text-lg leading-relaxed font-medium">
                        "{metaphor.text}"
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
