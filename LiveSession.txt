import React, { useState, useEffect, useRef } from "react";
import { Session } from "@/entities/Session";
import { Realm } from "@/entities/Realm";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Mic, MicOff, Video, VideoOff, Volume2, Users } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

// Mock participant data for demo
const mockParticipants = [
  {
    id: "sarah",
    name: "Sarah",
    image: "https://images.unsplash.com/photo-1494790108755-2616b612b407?w=400&h=400&fit=crop&crop=face"
  },
  {
    id: "mark", 
    name: "Mark",
    image: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face"
  },
  {
    id: "you",
    name: "You",
    image: "https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=400&h=400&fit=crop&crop=face"
  },
  {
    id: "lisa",
    name: "Lisa", 
    image: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face"
  },
  {
    id: "alex",
    name: "Alex",
    image: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face"
  }
];

export default function LiveSession() {
  const [session, setSession] = useState(null);
  const [realm, setRealm] = useState(null);
  const [timeRemaining, setTimeRemaining] = useState(900); // 15 minutes in seconds
  const [currentPhase, setCurrentPhase] = useState("intro"); // intro, core, reflection
  const [isMuted, setIsMuted] = useState(false);
  const [isVideoOff, setIsVideoOff] = useState(false);
  const [participants] = useState(mockParticipants);
  const [showInitialPrompt, setShowInitialPrompt] = useState(true);
  const navigate = useNavigate();

  const audioRef = useRef(null); // Ref for ambient audio

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get('session');
    if (sessionId) {
      loadSession(sessionId);
    }
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      setTimeRemaining(prev => {
        if (prev <= 1) {
          handleSessionEnd();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    // Phase transitions based on time
    if (timeRemaining > 780) { // First 2 minutes
      setCurrentPhase("intro");
    } else if (timeRemaining > 180) { // Next 10 minutes  
      setCurrentPhase("core");
    } else { // Last 3 minutes
      setCurrentPhase("reflection");
    }
  }, [timeRemaining]);

  // Hide initial prompt after 30 seconds
  useEffect(() => {
    const timer = setTimeout(() => {
      setShowInitialPrompt(false);
    }, 30000);

    return () => clearTimeout(timer);
  }, []);

  // Ambient sound playback
  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.volume = 0.3; // Set a default volume for ambient sound
      audioRef.current.play().catch(error => {
        console.log("Autoplay prevented for ambient sound:", error);
      });
    }
  }, []);

  const loadSession = async (sessionId) => {
    try {
      const sessionData = await Session.get(sessionId);
      setSession(sessionData);
      
      // Load realm data
      if (sessionData.realm_id) {
        const realmData = await Realm.get(sessionData.realm_id);
        setRealm(realmData);
      }
    } catch (error) {
      console.error("Error loading session:", error);
    }
  };

  const handleSessionEnd = () => {
    navigate(createPageUrl("SessionComplete"));
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getPhaseInfo = () => {
    switch(currentPhase) {
      case "intro":
        return { 
          title: "Introduction", 
          color: "from-blue-400 to-cyan-400"
        };
      case "core": 
        return { 
          title: "Core Story Sharing", 
          color: "from-purple-400 to-pink-400"
        };
      case "reflection":
        return { 
          title: "Reflection & Closing", 
          color: "from-green-400 to-teal-400"
        };
      default:
        return { 
          title: "Story Session", 
          color: "from-purple-400 to-pink-400"
        };
    }
  };

  const phaseInfo = getPhaseInfo();

  return (
    <div className="h-screen bg-gradient-to-br from-slate-800 via-slate-900 to-indigo-900 relative overflow-hidden">
      {/* Ambient background sound */}
      <audio ref={audioRef} src="/assets/ambient-meditation.mp3" loop autoPlay preload="auto" />

      {/* Subtle ambient background for live session */}
      <div className="absolute inset-0">
        <div className="floating-orb" style={{
          top: '30%',
          left: '15%',
          width: '80px',
          height: '80px',
          background: 'linear-gradient(45deg, rgba(59, 130, 246, 0.2), rgba(99, 102, 241, 0.2))',
          animationDelay: '0s'
        }} />
      </div>

      {/* Header */}
      <div className="relative z-10 p-4 md:p-6">
        <div className="flex justify-between items-center mb-6">
          <div className="glass-morphism rounded-2xl px-6 py-3">
            <h1 className="text-2xl font-bold text-white">Mind Shelter</h1>
            <p className="text-white/70 text-sm">{realm?.name || "Loading..."} • Live Circle</p>
          </div>
          <div className="glass-morphism rounded-full px-4 py-2">
            <div className="text-2xl font-bold text-white">{formatTime(timeRemaining)}</div>
          </div>
        </div>

        {/* Phase Indicator */}
        <div className="glass-morphism rounded-2xl p-4 mb-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-white font-semibold text-lg">{phaseInfo.title}</h2>
              <p className="text-white/70 text-sm">Current phase of our sharing circle</p>
            </div>
            <div className={`w-12 h-12 rounded-full bg-gradient-to-r ${phaseInfo.color} flex items-center justify-center`}>
              <Users className="w-6 h-6 text-white" />
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="relative z-10 px-4 md:px-6 pb-24">
        {/* Participants Grid */}
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-6">
          {participants.map((participant, index) => (
            <Card key={participant.id} className="glass-morphism border-white/10">
              <CardContent className="p-4">
                <div className="aspect-video bg-cover bg-center rounded-lg mb-3 relative overflow-hidden">
                  <img 
                    src={participant.image} 
                    alt={participant.name}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute bottom-2 left-2">
                    <Badge className="text-xs px-2 py-1 bg-white/20 text-white">
                      {participant.name}
                    </Badge>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>

      {/* Initial Prompt - Only shown at start */}
      {showInitialPrompt && (
        <div className="fixed bottom-20 left-4 right-4 z-20">
          <div className="glass-morphism rounded-xl p-4 max-w-2xl mx-auto border border-white/10">
            <div className="flex items-start gap-3">
              <div className="w-6 h-6 rounded-full bg-gradient-to-r from-indigo-400 to-purple-500 flex items-center justify-center flex-shrink-0 mt-1">
                <span className="text-white font-bold text-xs">✨</span>
              </div>
              <div>
                <h4 className="text-white font-medium mb-1">Welcome to {realm?.name}</h4>
                <p className="text-white/90 text-sm">
                  {session?.participants?.[0]?.icebreaker_prompt || "Share your story with authenticity and listen with empathy."}
                </p>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowInitialPrompt(false)}
                className="text-white/70 hover:text-white ml-auto"
              >
                ×
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Controls */}
      <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 z-20">
        <div className="flex items-center gap-4 glass-morphism rounded-full px-6 py-3">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsMuted(!isMuted)}
            className={`rounded-full w-12 h-12 ${isMuted ? 'bg-red-500/20 text-red-400' : 'bg-white/10 text-white'} hover:bg-white/20`}
          >
            {isMuted ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
          </Button>
          
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsVideoOff(!isVideoOff)}
            className={`rounded-full w-12 h-12 ${isVideoOff ? 'bg-red-500/20 text-red-400' : 'bg-white/10 text-white'} hover:bg-white/20`}
          >
            {isVideoOff ? <VideoOff className="w-5 h-5" /> : <Video className="w-5 h-5" />}
          </Button>

          <div className="w-px h-8 bg-white/20"></div>

          <Button
            variant="ghost"
            size="icon"
            className="rounded-full w-12 h-12 bg-white/10 text-white hover:bg-white/20"
          >
            <Volume2 className="w-5 h-5" />
          </Button>
        </div>
      </div>
    </div>
  );
}