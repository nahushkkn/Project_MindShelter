import React, { useState, useEffect } from "react";
import { Session } from "@/entities/Session";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Star, Users, Clock, Play, Volume2, VolumeX } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function SessionLobby() {
  const [session, setSession] = useState(null);
  const [timeToStart, setTimeToStart] = useState(0);
  // The ambientEnabled state is no longer used for toggling in the UI as per the outline.
  // It's kept here just in case other parts of the application still rely on its existence,
  // but its UI control has been removed from this component.
  const [ambientEnabled, setAmbientEnabled] = useState(true); 
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const sessionId = urlParams.get('session');
    if (sessionId) {
      loadSession(sessionId);
    }
  }, []);

  useEffect(() => {
    const interval = setInterval(() => {
      if (session?.scheduled_time) {
        const now = new Date();
        const start = new Date(session.scheduled_time);
        const diff = start.getTime() - now.getTime();
        setTimeToStart(Math.max(0, Math.ceil(diff / 1000)));
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [session]);

  const loadSession = async (sessionId) => {
    try {
      const sessionData = await Session.get(sessionId);
      setSession(sessionData);
    } catch (error) {
      console.error("Error loading session:", error);
    }
    setIsLoading(false);
  };

  const startSession = () => {
    navigate(createPageUrl(`LiveSession?session=${session.id}`));
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (isLoading) {
    return (
      <div className="p-8 flex items-center justify-center min-h-screen">
        <div className="glass-morphism rounded-2xl p-8 text-center">
          <div className="animate-spin w-8 h-8 border-2 border-white/30 border-t-white rounded-full mx-auto mb-4"></div>
          <p className="text-white">Loading session...</p>
        </div>
      </div>
    );
  }

  const participant = session?.participants?.[0];

  return (
    <div className="p-4 md:p-8 max-w-4xl mx-auto">
      {/* Session Header */}
      <div className="glass-morphism rounded-3xl p-8 mb-8 text-center">
        <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center">
          <Users className="w-10 h-10 text-white" />
        </div>
        <h1 className="text-3xl font-bold text-amber-dark mb-2">Mind Shelter Circle Ready</h1>
        <p className="text-amber-light text-lg mb-6">Your sanctuary for deep connection and reflection</p>
        
        <div className="flex justify-center gap-4 mb-6 flex-wrap">
          <Badge className="bg-amber-200 text-amber-900 border-amber-300 px-4 py-2">
            Room Code: {session?.room_code}
          </Badge>
          <Badge className="bg-amber-300 text-amber-900 border-amber-400 px-4 py-2">
            <Clock className="w-4 h-4 mr-2" />
            15 minutes of mindful sharing
          </Badge>
        </div>

        {timeToStart > 0 ? (
          <div className="text-center">
            <div className="text-4xl font-bold text-amber-dark mb-2">
              {formatTime(timeToStart)}
            </div>
            <p className="text-amber-light">Your circle begins in</p>
          </div>
        ) : (
          <Button 
            onClick={startSession}
            className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white px-8 py-3 rounded-xl font-semibold text-lg"
            size="lg"
          >
            <Play className="w-5 h-5 mr-2" />
            Enter Circle
          </Button>
        )}
      </div>

      {/* Your Profile */}
      <div className="glass-morphism rounded-2xl p-6 mb-8">
        <h3 className="text-xl font-semibold text-amber-dark mb-6">Your Reflection Profile</h3>
        
        <div className="space-y-4">
          <div>
            <label className="text-amber-light text-sm font-medium">Your Chosen Metaphor</label>
            <div className="glass-morphism rounded-xl p-4 mt-2 bg-amber-700/20">
              <p className="text-amber-dark text-lg font-medium">"{participant?.chosen_metaphor}"</p>
            </div>
          </div>

          <div>
            <label className="text-amber-light text-sm font-medium">Your Reflection Prompt</label>
            <div className="glass-morphism rounded-xl p-4 mt-2 bg-amber-700/20">
              <p className="text-amber-light">{participant?.icebreaker_prompt}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Session Guidelines */}
      <div className="glass-morphism rounded-2xl p-6 mb-8">
        <h3 className="text-xl font-semibold text-amber-dark mb-4">Session Flow</h3>
        <div className="space-y-4">
          <div className="flex items-center gap-4 p-4 bg-amber-700/10 rounded-xl">
            <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center text-white font-bold">1</div>
            <div>
              <h4 className="text-amber-dark font-medium">Opening</h4>
              <p className="text-amber-light text-sm">2 minutes to center ourselves and create safe space</p>
            </div>
          </div>
          <div className="flex items-center gap-4 p-4 bg-amber-700/10 rounded-xl">
            <div className="w-10 h-10 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 flex items-center justify-center text-white font-bold">2</div>
            <div>
              <h4 className="text-amber-dark font-medium">Heart Sharing</h4>
              <p className="text-amber-light text-sm">10 minutes of authentic, vulnerable storytelling</p>
            </div>
          </div>
          <div className="flex items-center gap-4 p-4 bg-amber-700/10 rounded-xl">
            <div className="w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold">3</div>
            <div>
              <h4 className="text-amber-dark font-medium">Closing Moments</h4>
              <p className="text-amber-light text-sm">3 minutes for reflection and gratitude</p>
            </div>
          </div>
        </div>
      </div>

      {/* Ambient Controls */}
      <div className="glass-morphism rounded-2xl p-6">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-amber-dark font-semibold mb-1">Session Ambiance</h3>
            <p className="text-amber-light text-sm">Natural sounds will pause during your circle</p>
          </div>
          <Button
            variant="ghost"
            size="icon"
            // The onClick handler for toggling ambient sounds has been removed as per the outline.
            // The button now only serves as a visual indicator.
            className="text-amber-light hover:text-amber-dark hover:bg-white/10"
          >
            {/* The conditional rendering for VolumeX has been removed as per the outline. */}
            <Volume2 className="w-5 h-5" />
          </Button>
        </div>
      </div>
    </div>
  );
}
