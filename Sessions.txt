import React, { useState, useEffect } from "react";
import { Session } from "@/entities/Session";
import { Realm } from "@/entities/Realm";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Calendar, Clock, Users, Star, Play } from "lucide-react";
import { format } from "date-fns";

export default function Sessions() {
  const [sessions, setSessions] = useState([]);
  const [realms, setRealms] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("upcoming");

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const user = await User.me();
      const [sessionData, realmData] = await Promise.all([
        Session.list("-created_date"),
        Realm.list()
      ]);
      
      setSessions(sessionData);
      setRealms(realmData);
    } catch (error) {
      console.error("Error loading data:", error);
    }
    setIsLoading(false);
  };

  const getRealmName = (realmId) => {
    const realm = realms.find(r => r.id === realmId);
    return realm?.name || "Unknown Realm";
  };

  const filteredSessions = sessions.filter(session => {
    if (activeTab === "upcoming") {
      return session.status === "scheduled" || session.status === "in_progress";
    }
    return session.status === "completed";
  });

  const getStatusColor = (status) => {
    switch(status) {
      case "scheduled": return "bg-blue-100 text-blue-800 border-blue-200";
      case "in_progress": return "bg-green-100 text-green-800 border-green-200";
      case "completed": return "bg-purple-100 text-purple-800 border-purple-200";
      case "cancelled": return "bg-red-100 text-red-800 border-red-200";
      default: return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  if (isLoading) {
    return (
      <div className="p-8 max-w-6xl mx-auto">
        <div className="grid gap-6">
          {Array(4).fill(0).map((_, i) => (
            <div key={i} className="glass-morphism rounded-2xl p-6 animate-pulse">
              <div className="h-6 bg-white/10 rounded mb-4 w-1/3"></div>
              <div className="h-4 bg-white/10 rounded mb-2"></div>
              <div className="h-4 bg-white/10 rounded w-2/3"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-8 max-w-6xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">My Circles</h1>
        <p className="text-gray-700 text-lg">Your journey of reflection and connection</p>
      </div>

      {/* Tabs */}
      <div className="glass-morphism rounded-2xl p-2 mb-8 inline-flex">
        <Button
          variant={activeTab === "upcoming" ? "default" : "ghost"}
          onClick={() => setActiveTab("upcoming")}
          className={`mr-2 ${activeTab === "upcoming" ? 'bg-blue-500 text-white' : 'text-gray-800 hover:text-gray-800 hover:bg-white/10'}`}
        >
          <Calendar className="w-4 h-4 mr-2" />
          Upcoming
        </Button>
        <Button
          variant={activeTab === "completed" ? "default" : "ghost"}
          onClick={() => setActiveTab("completed")}
          className={activeTab === "completed" ? 'bg-blue-500 text-white' : 'text-gray-800 hover:text-gray-800 hover:bg-white/10'}
        >
          <Star className="w-4 h-4 mr-2" />
          Completed
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <Card className="glass-morphism border-white/10">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 flex items-center justify-center mx-auto mb-4">
              <Calendar className="w-6 h-6 text-white" />
            </div>
            <h3 className="text-2xl font-bold text-gray-900 mb-1">{sessions.filter(s => s.status === 'scheduled').length}</h3>
            <p className="text-gray-700">Scheduled Circles</p>
          </CardContent>
        </Card>
        
        <Card className="glass-morphism border-white/10">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 rounded-full bg-gradient-to-r from-indigo-500 to-purple-500 flex items-center justify-center mx-auto mb-4">
              <Star className="w-6 h-6 text-white" />
            </div>
            <h3 className="text-2xl font-bold text-gray-900 mb-1">{sessions.filter(s => s.status === 'completed').length}</h3>
            <p className="text-gray-700">Stories Shared</p>
          </CardContent>
        </Card>
        
        <Card className="glass-morphism border-white/10">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-pink-500 flex items-center justify-center mx-auto mb-4">
              <Users className="w-6 h-6 text-white" />
            </div>
            <h3 className="text-2xl font-bold text-gray-900 mb-1">4.9</h3>
            <p className="text-gray-700">Connection Rating</p>
          </CardContent>
        </Card>
      </div>

      {/* Sessions List */}
      <div className="space-y-6">
        {filteredSessions.length === 0 ? (
          <Card className="glass-morphism border-white/10">
            <CardContent className="p-12 text-center">
              <Users className="w-16 h-16 text-amber-400 mx-auto mb-4" />
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {activeTab === "upcoming" ? "No Upcoming Circles" : "No Completed Circles"}
              </h3>
              <p className="text-gray-700 mb-6">
                {activeTab === "upcoming" 
                  ? "Join a reflective realm to schedule your next circle" 
                  : "Complete some circles to see your journey of connection"}
              </p>
              {activeTab === "upcoming" && (
                <Button className="bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700 text-white">
                  Explore Realms
                </Button>
              )}
            </CardContent>
          </Card>
        ) : (
          filteredSessions.map((session) => (
            <Card key={session.id} className="glass-morphism border-white/10 hover:bg-amber-600/90 transition-all duration-300">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-gray-900 text-xl mb-2">
                      {getRealmName(session.realm_id)}
                    </CardTitle>
                    <div className="flex items-center gap-4 text-gray-700">
                      <div className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        {format(new Date(session.scheduled_time), "MMM d, yyyy")}
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="w-4 h-4" />
                        {format(new Date(session.scheduled_time), "h:mm a")}
                      </div>
                      <div className="flex items-center gap-1">
                        <Users className="w-4 h-4" />
                        {session.participants?.length || 0}/5 participants
                      </div>
                    </div>
                  </div>
                  <Badge className={`${getStatusColor(session.status)} border`}>
                    {session.status.replace('_', ' ')}
                  </Badge>
                </div>
              </CardHeader>
              
              <CardContent>
                {session.participants && session.participants.length > 0 && (
                  <div className="mb-4">
                    <h4 className="text-gray-700 text-sm font-medium mb-2">Your Chosen Metaphor</h4>
                    <p className="text-gray-900 italic">"{session.participants[0].chosen_metaphor}"</p>
                  </div>
                )}
                
                <div className="flex justify-between items-center">
                  <div className="flex items-center gap-2">
                    {session.status === "completed" && (
                      <div className="flex items-center gap-1">
                        {Array(5).fill(0).map((_, i) => (
                          <Star 
                            key={i} 
                            className={`w-4 h-4 ${i < (session.participants?.[0]?.relatability_stars || 0) ? 'text-yellow-400 fill-current' : 'text-amber-200'}`} 
                          />
                        ))}
                      </div>
                    )}
                  </div>
                  
                  {session.status === "in_progress" && (
                    <Button className="bg-gradient-to-r from-green-500 to-teal-500 hover:from-green-600 hover:to-teal-600 text-white">
                      <Play className="w-4 h-4 mr-2" />
                      Rejoin Session
                    </Button>
                  )}
                </div>
              </CardContent>
            </Card>
          ))
        )}
      </div>
    </div>
  );
}
